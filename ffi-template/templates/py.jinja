from foreignc import *

{% for box in boxes %}
class {{ box.self_ty }}(Box):
{%- if box.destructor %}
    @staticmethod
    def get_free_func():
        return '{{ box.destructor }}'
{%- endif %}
{% for abi in box.methods %}
    @create_abi('{{ abi.extern_name }}'
        {%- if abi.extern_inputs | length != 0 -%}
            , argtypes=(
                {%- for lib_value in abi.extern_inputs -%}
                    {%- if not loop.first -%}, {% endif -%}
                    {{ lib_value }}
                {%- endfor -%}
            ,)
        {%- endif -%}
        {%- if abi.extern_output -%}
            , restype={{ abi.extern_output }}
        {%- endif -%}
    )
    def {{ abi.sig_name }}(
        {%- if abi.is_method -%}self{%- else -%}lib: BaseLib{%- endif -%}
        {%- for sig_value in abi.sig_inputs -%}
            , {{ sig_value }}
        {%- endfor -%}
    ) {% if abi.sig_output -%}
        -> {{ abi.sig_output }}
    {%- endif -%}:
        return {% if abi.is_method -%}self{%- else -%}lib{%- endif -%}
        .__lib__.{{ abi.sig_name }}(
            {%- for arg in abi.arg_list -%}
            {%- if loop.first == false -%}, {% endif -%}
            {{ arg }}
            {%- endfor -%}           
        )
{% endfor %}
{%- endfor -%}

{% for json in jsons %}
class {{ json.self_ty }}(Json):
{%- if json.methods | length == 0 %}
    pass
{%- else -%}
{% for abi in json.methods %}
    @create_abi('{{ abi.extern_name }}'
        {%- if abi.extern_inputs | length != 0 -%}
            , argtypes=(
                {%- for lib_value in abi.extern_inputs -%}
                    {%- if not loop.first -%}, {% endif -%}
                    {{ lib_value }}
                {%- endfor -%}
            ,)
        {%- endif -%}
        {%- if abi.extern_output -%}
            , restype={{ abi.extern_output }}
        {%- endif -%}
    )
    def {{ abi.sig_name }}(
        {%- if abi.is_method -%}self{%- else -%}lib: BaseLib{%- endif -%}
        {%- for sig_value in abi.sig_inputs -%}
            , {{ sig_value }}
        {%- endfor -%}
    ) {% if abi.sig_output -%}
        -> {{ abi.sig_output }}
    {%- endif -%}:
        return {% if abi.is_method -%}self{%- else -%}lib{%- endif -%}
        .__lib__.{{ abi.sig_name }}(
            {%- for arg in abi.arg_list -%}
            {%- if loop.first == false -%}, {% endif -%}
            {{ arg }}
            {%- endfor -%}           
        )
{% endfor %}
{%- endif %}
{% endfor -%}

class {{ lib_name }}(BaseLib):
    def __init__(self, src: str):
        super().__init__(src)
{% for abi in abis %}
    @create_abi('{{ abi.extern_name }}'
        {%- if abi.extern_inputs | length != 0 -%}
            , argtypes=(
                {%- for lib_value in abi.extern_inputs -%}
                    {%- if not loop.first -%}, {% endif -%}
                    {{ lib_value }}
                {%- endfor -%}
            ,)
        {%- endif -%}
        {%- if abi.extern_output -%}
            , restype={{ abi.extern_output }}
        {%- endif -%}
    )
    def {{ abi.sig_name }}(self
        {%- for sig_value in abi.sig_inputs -%}
            , {{ sig_value }}
        {%- endfor -%}
    ) {% if abi.sig_output -%}
        -> {{ abi.sig_output }}
    {%- endif -%}:
        return self.__lib__.{{ abi.sig_name }}(
            {%- for arg in abi.arg_list -%}
            {%- if loop.first == false -%}, {% endif -%}
            {{ arg }}
            {%- endfor -%}
        )
{% endfor %}